# 1강.OT

<aside>
💡 1.프로그래밍을 공부하는 이유

</aside>

프로그래밍을  꼭 알아야하는 것은 아니다 

그러나 항상 사용하고 있는 컴퓨터나 휴대폰이 어떻게 동작하는지에 대한 이해도가 높아 질려면 어떻게 소프트웨어를 만드는지 알아야하고 나중에 소프트웨어를 직접 만들어보면서 기획하면 도움이 될 것이다

---

<aside>
💡 2. 프로그래밍이란?

</aside>

컴퓨터 : 굉장히 빠른 연산을 갖춘 계산기?

프로그래밍 언어를 이용하여 프로그래밍을 하여 앱을 만든다.

---

<aside>
💡 3. 프로세싱과 자바

</aside>

---

프로세싱은 자바를 기반으로 하고 있다.

그래서 프로세싱은 자바에서 사용하는 모든 함수들을 사용할 수 있다.

### 자바가 많이 쓰이는 이유

다양한 기계들에 모두 사용할 수 있게 구성되있다.

인터넷이 발전하면서 웹에서 굉장히 많이 사용되어 지게 되었고, 안드로이드도 자바를 베이스로 만들어졌다

---

<aside>
💡 4.프로세싱 학습의 장점

</aside>

프로그래밍 언어는 어느 한 언어를 어느정도 숙달하고 나면 언어를 깨우치는 것은 어렵지 않다.

### 프로세싱이라는 언어를 공부하는 것의 장점

대다수의 프로그래밍 언어들은 먼저 프로그래밍을 해서 처음하는 일들이 보통 더하기 빼기 곱하기 나누기 이런식으로 수치를 계산을 하거나 혹은 텍스트를 입력을 해서 결과물이 텍스트로 나오는 것들을 처음에 주로 공부하게 된다.

그래서 컴퓨터나 공학에 관심이 없으면 나오는 결과물이 재미가 없기 때문에 사람들이 쉽게 흥미를 잃는다.

하지만 프로세싱은 디자이너나 아티스트를 위한 프로그램이다 보니 화면상의 어떤 도형이나 이미지를 그릴 수 있다.

<aside>
💡 5. 프로세싱과 유사한 프로그램 소개

</aside>

---

### 오픈 프레임 웍스가 있다

프로세싱과 차이점은 오픈 프레임 웍스는 c++언어를 기반하고 있다 

프로세싱에서 사용하던 코드를 오픈 프레임 웍스로 넘어가면 속도가 개선이 된다.

### 프로세싱으로 개발을 하다가 버벅임이 방생하거나 퍼포먼스가 안나온다면 컴퓨터를 업그레이드 하거나 프로그래밍 스킬을 늘려서 최적화를 통해 프로그램이 잘 구동되게 만든다.

### 최적화를 하려면 공부를 굉장히 많이 해야 하는데, 컴퓨터가 어떻게 연산을 하는지 프로그램이 왜 버벅거리게 됐는지, 메모리 관리도 해줘야하고 네트워크 쪽에서 문제가 생겼는지 등을 통해 디버깅을 해주어야한다.

## CINDER

비주얼 적인 것을 제작하기 위해 만들어져있는 소프트웨어

기업에서 주로 사용한다.

## TOUCHDESIGNER

좀 프로그래밍하는 방법이 다르다.

타이핑을 하면서 프로그래밍을 하는게 아니라 블록들을 연결해서 코딩하는 방식이다. 이런 방식들이 요즘 굉장히 많이 쓰이고 있고, 요즘 미디어 아티스트 들이 굉장히 많이 다루기 시작한 그런 소프트웨어이다.

이런식으로 프로그래밍 하는 방식을 visual programing language 라고 부른다. 어렸을때 사용했던 skretch나 entry 가 같은 방식이다.

MAX/MSP/Jitter 이런류나 퓨터데이터 라는 프로그램도 같은방식이다.

---

<aside>
💡 6. 오픈소스 소프트웨어

</aside>

os 오프 라이팅 시스템

- 맥
- 윈도우
- 리눅스

### 오픈 소스

사람들이 만든 코드를 공개해서 그 코드를 다른 사람이 이용할 수도 있고 또 내가 다른 사람이 만들어 놓은 코드를 가지고 와서 또 발전 시킬 수도 있고 서로 공유해서 무료로 사용할 수 있는 것이 장점이다.

- 오픈 소스는 코드의 공개와 자유로운 수정을 통해 지속적인 발전이 가능하며, 다른 사용자들과의 협업을 통해 소프트웨어를 발전시킬 수 있습니다.
- 프로세싱은 오픈 소스 소프트웨어 중 하나로, 다양한 라이브러리를 통해 추가 기능을 사용할 수 있습니다. 이는 개발자들이 필요한 기능을 쉽게 추가하고 활용할 수 있는 환경을 제공합니다
- 프로세싱은 이제 까지 이십 년 동안 널리 사용되어 온 이유중 하나는 오픈 소스의 강점과 다양한 라이브러리를 활용할 수 있는 점 때문입니다.
- 

<aside>
💡 7. 설치 방법

</aside>

### 프로세싱 소프트웨어 설치 안내

웹 브라우저를 열어 사이트에 접속한 후 페이지 상단에 다운로드 메뉴를 클릭하여 이동한다.

### 운영체제에 맞는 버전 선택

다운로드 페이지에서 사용 중인 운영체제에 맞는 버전을 선택하여 다운로드하세요 맥,윈도우,리눅스 등 다양한 환경을 지원합니다.

### 압축 파일 다운로드 및 풀기

선택한 버전의 압축 파일을 다운로드 받은 후, 해당 파일을 압축 해제하세요 압축 파일을 풀면 프로세싱 소프트웨어를 설치할 수 있는 파일이 나타납니다.

### 프로세싱 소프트 웨어 실행

압축을 푼 파일 중 실행 가능한 파일을 실행하여 프로세싱 소프트웨어를 실행하세요 환영메시지가 표시되면 환영 창 표시 옵션을 해제하세요.

### 폴더 생성 확인

프로세싱을 실행하면 프로세싱이 설치된 자동으로 생성됩니다 해당 폴더에는 프로세싱과 관련된 파일 및 폴더가 저장됩니다.

### 준비 완료

설치가 완료되었습니다! 이제 프로세싱 소프트웨어를 실행하여 코딩을 시작할 준비가 되었습니다. 원하는 위치에 코드를 작성하고 저장하세요. 프로세싱을 통해 창의적인 작품을 만들어보세요.

---

<aside>
💡 8.컴퓨터 그래픽 좌표와 픽셀

</aside>

### 프로세싱에서의 좌표 체계

프로세싱은 화면에 그림을 그리거나 다양한 그래픽 요소를 표시하는 데에 주로 사용되는 소프트웨어입니다. 이를 위해 사용되는 좌표 체계에 대해 이해하는 것이 중요합니다

### 수학에서의 좌표 체계

수학에서의 좌표 체계는 평면 상에 x축과y축이 있으며, 원점을 중심으로 좌우 및 상하 방향으로 값이 증가합니다 x축은 오른쪽으로 갈수록 양수이고, 왼쪽으로 갈수록 음수입니다 y축은 위로 갈수록 양수이고 아래로 갈수록 음수입니다.

### 레티나 디스플레이 등의 고해상도 모니터

고해상도 모니터를 사용하는 경우 픽셀의 크기가 작아져서 픽셀 단위 자표가 실제 화면에서 표시되는 크기와 다를 수 있습니다 이 경우에는 픽셀의 실제 크기와 화면에서의 표시 크기를 고려하여 좌표를 설정해야 합니다.

---

<aside>
💡 9.프로세싱 환경 세팅하기

</aside>

### 프로세싱 환경 설정

프로세싱 소프트웨어를 사욯하기 전에 모두가 동일환 환경에서 작업할 수 있도록 설정을 맞춰보겠습니다 이는 여려분이 수업을 수월하게 따라갈 수 있도록 도와줄 것입니다

### 설정 절차

1. **환경 설정 창 열기**: 프로세싱 메뉴에서 "환경설정(Preferences)"을 선택합니다. 맥 사용자는 Command + , 키를, 윈도우 사용자는 Ctrl + , 키를 눌러도 됩니다.
2. **글꼴 선택**: "스케치 에디터" 섹션에서 "콘솔 글꼴 선택"을 찾습니다. 여기서 프로그래밍에 적합한 폰트를 선택해야 합니다. 나눔고딕 코딩 폰트를 사용하는 것이 좋습니다.
3. **한글 입력 설정**: "한글 입력 허용" 옵션을 반드시 체크해주세요. 이 옵션을 체크하지 않으면 한글 입력이 정상적으로 되지 않을 수 있습니다.
4. **기타 설정**: 그 외에도 사용하실 폰트 크기, 오류 검사 활성화, 코드 자동완성 등을 설정하실 수 있습니다. 필요한 설정을 하시고 나머지는 기본값 그대로 두셔도 됩니다.

### 메모리 설정

메모리 설정은 기본적으로 256MB로 되어 있습니다. 만약 후에 프로세싱을 사용하시면서 메모리 용량이 부족하다고 느낄 때에는 이 설정을 변경하실 수 있습니다.

### 참고 사항

- 컨트롤 스페이스 키 설정 :  맥 사용자 중 한영 전환을 위해 컨트롤 스페이스 키를 사용하는 경우, 해당 기능과 겹치지 않도록 주의해야 합니다. 한영 전환을 위한 다른 단축키를 설정하거나, 해당 기능을 사용하지 않도록 설정할 수 있습니다.

환경 설정을 마친 후에는 모두가 동일한 환경에서 프로세싱을 시작할 수 있습니다. 이제 코딩에 집중해보세요

---

<aside>
💡 10. 인터페이스 설명

</aside>

### 프로세싱 인터페이스 설명

프로세싱의 주요 기능과 인터페이스에 대해 설명해드리겠습니다.

### 실행 버튼

삼각형 모양 실행 버튼 : 코드를 실행하여 결과를 확인할 수 있습니다. 클릭하면 작성한 코드가 실행되고, 결과가 새 창에 표시됩니다.

### 디버깅

디버깅 버튼 : 코드에 오류가 있을 때 디버깅 기능을 활성화합니다 필요한 경우에 사용할 수 있습니다

### 모드 선택

모드 : 프로세싱은 다양한 모드를 지원합니다. 주로 사용하는 기본 모드는 자바 기반이다 추가 모드는 나중에 프로그래밍을 확장하거나 다른 언어를 사용할 때 유용하니다.

### 파일 및 탭 관리

파일 저장 및 탭 추가 : 코드를 작성하고 저장할 떄 사용됩니다 파일 이름 및 탭 이름을 설정하여 작업을 구분할 수 있습니다 탭은 코드를 분리하여 정리하는데 유용합니다.

### 콘솔 창

콘솔 창 : 코드 실행 중 발생하는 메시지, 오류, 결과 등이 표시됩니다 디버깅 및 프로그램 실행 상태를 확인하는데 사용됩니다.

프로세싱 인터페이스는 이렇게 구성되어 있으며 여기서 주로 사용되는 기능들을 잘 활용하여 코딩을 진행하시면 됩니다 

---

<aside>
💡 11. 코딩 시작하기 기본 문법

</aside>

### 프로그램 소개

이 프로그램은 컴퓨터 프로그래밍 언어인 프로세싱을 활용하여 그림을 그리는 프로그램 입니다

디자이너와 아티스트들이 사용하는 그림 그리기 도구와 비슷한 기능을 제공합니다.

### 필요한 도구 및 재료 준비

그림 그리기에 필요한 종이, 연필, 색연필 등의 재료와 도구를 준비합니다

프로세싱 소프트웨어를 설치하고 실행하여 그림 그리기 환경을 설정합니다.

## 화면 크기 설정

- 프로그램 실행 시 화면 크기를 설정하는 방법을 설명합니다.
- 프로세싱 레퍼런스 페이지를 활용하여 사이즈 명령어의 사용법을 확인하는 방법을 안내합니다.

## 예제 실행

- 설정한 화면 크기로 창을 만들고 점을 찍는 예제를 실행합니다.
- 예제 실행을 통해 프로세싱의 기본 개념을 이해하고 실습합니다.

---

<aside>
💡 12. 점을 찍어보자 point(x, y);

</aside>

### **포인트(Point) 명령어**

- 컴퓨터에게 점을 찍도록 지시하는 명령어입니다.
- 포인트 명령어를 사용하기 위해서는 찍을 위치를 지정하는 매개변수가 필요합니다.

### **좌표값 설정**

- 포인트 명령어에서 좌표값을 설정할 때, 좌측 상단을 기준으로하여 x와 y 좌표값을 지정합니다.
- 예를 들어, (0, 0)은 좌측 상단의 위치이며, x와 y 값이 커질수록 오른쪽과 아래쪽으로 이동합니다.

### **찍을 위치 설정**

- 포인트 명령어를 사용할 때는 정확한 찍을 위치를 지정해주어야 합니다.
- 예를 들어, (250, 250)의 좌표값은 화면의 중앙에 해당하는 위치입니다.

### **실행 결과 확인**

- 설정한 좌표값을 기준으로 프로그램을 실행하면, 해당 위치에 점이 찍힙니다.
- 화면에 점이 정확하게 찍힌 것을 확인할 수 있습니다.

---

<aside>
💡 13. 선을 그려보자 line(x1, y1, x2, y2);

</aside>

### **라인(Line) 명령어**

- 직선을 그릴 때 사용하는 명령어입니다.
- 라인 명령어를 사용하기 위해서는 각 점의 좌표값이 필요합니다.

### **좌표값 설정**

- 라인 명령어에서는 시작점과 끝점의 좌표값을 지정합니다.
- 시작점과 끝점의 x와 y 좌표값을 차례로 입력하여야 합니다.

### **선 그리기**

- 라인 명령어를 사용하여 시작점과 끝점을 지정하면, 해당 위치를 잇는 선이 그려집니다.
- 선은 시작점과 끝점을 연결하여 그려지며, 지정한 좌표값을 기준으로 선이 그려집니다.

### **코드 실행 결과 확인**

- 프로그램을 실행하면, 지정한 위치에 선이 그려지는 것을 확인할 수 있습니다.
- 시작점과 끝점을 잘 지정하여 원하는 형태의 선을 그릴 수 있습니다.

---

<aside>
💡 14. 면, 사각형을 그려보자 rect(a, b, c, d);

</aside>

### **렉트(Rect) 명령어**

- 네모를 그릴 때 사용하는 명령어입니다.
- 렉트 명령어를 사용하기 위해서는 네 개의 매개변수가 필요합니다.
- 각각 시작점의 x 좌표, y 좌표, 너비, 높이를 나타냅니다.

### **다양한 도형 그리기 명령어**

- 이외에도 다양한 도형을 그리는 명령어들이 있습니다.
    - 아크(Arc): 호를 그릴 때 사용합니다.
    - 써클(Circle): 원을 그릴 때 사용합니다.
    - 엘립스(Ellipse): 타원을 그릴 때 사용합니다.
    - 쿼드(Quad): 사각형을 그릴 때 사용합니다.
    - 레트(Rect): 직사각형을 그릴 때 사용합니다.
    - 스퀘어(Square): 정사각형을 그릴 때 사용합니다.
    - 트라이앵글(Triangle): 삼각형을 그릴 때 사용합니다.

### **명령어 활용**

- 명령어를 사용하여 원하는 위치와 크기의 도형을 그릴 수 있습니다.
- 시작점과 너비, 높이 등을 잘 설정하여 원하는 모양의 도형을 그릴 수 있습니다.

### **레퍼런스 페이지 활용**

- 레퍼런스 페이지에서는 다양한 도형 그리기 명령어들을 확인할 수 있습니다.
- 명령어들을 직접 사용해보고, 어떻게 활용하는지 연습해보세요.
- 각 명령어의 사용법을 숙지하고 실습을 통해 익숙해지는 것이 중요합니다.

---

<aside>
💡 15. 원을 그려보자 elipse(a, b, c, d);

</aside>

### **엘립스(Ellipse) 명령어 활용**

- 엘립스 명령어는 타원을 그릴 때 사용됩니다.
- 엘립스 명령어도 마찬가지로 네 개의 매개변수가 필요합니다.
    - 중심점의 x 좌표, y 좌표, 너비, 높이를 나타냅니다.
- 예를 들어, 정중앙에 위치한 타원을 그리고자 한다면 다음과 같이 작성할 수 있습니다:
    - 중심점의 x 좌표와 y 좌표는 250 픽셀 위치입니다.
    - 너비와 높이는 각각 100 픽셀입니다.
- 실행 결과는 프로그램이 위에서부터 아래로 순차적으로 실행되므로, 이미 그려진 도형 위에 겹쳐 그려집니다.
- 따라서, 원이나 네모 등의 도형이 겹쳐져 나타나게 됩니다.

---

<aside>
💡 16. 선의 색을 바꿔보자 stroke(gray);

</aside>

### **색상 변경 명령어 활용**

- 외곽선 색상을 변경하는 명령어는 stroke()이며, 내부를 채우는 색상을 변경하는 명령어는 fill()입니다.
- 색상을 변경하기 위해서는 먼저 색상을 선택하고 그림을 그려야 합니다.
- 색상 선택은 0부터 255 사이의 숫자를 입력하여 수행합니다.
- 예를 들어, 외곽선 색상을 변경하고자 한다면 stroke() 명령어를 사용합니다.
- 실행 결과는 코드가 위에서부터 아래로 순차적으로 실행되기 때문에, 색상 변경 명령어는 그림을 그린 이후에 적용됩니다.
- 따라서, 색상 변경 명령어를 그림을 그리기 전에 적용하면 변화가 없습니다.
- 색상을 선택할 때는 0에서 255 사이의 숫자를 입력해야 하며, 이는 컴퓨터가 색상을 처리하는 방식에 따라 지정됩니다.
- 예를 들어, 검정색은 0, 흰색은 255로 지정됩니다. 중간 색상은 이 두 값 사이의 숫자를 입력하여 선택할 수 있습니다.

---

<aside>
💡 17. 컬러로 선의 색을 바꿔보자 stroke(a, b, c);

</aside>

1. **RGB 색상 코드**: 이는 빛의 삼원색인 빨강(Red), 녹색(Green), 파랑(Blue)의 세 가지 색상을 이용하여 색상을 지정하는 방법입니다. 각 색상은 0에서 255 사이의 값으로 표현됩니다. 예를 들어, 빨간색은 (255, 0, 0), 초록색은 (0, 255, 0), 파란색은 (0, 0, 255)입니다. 이렇게 색상을 조합하여 원하는 색상을 만들 수 있습니다.
2. **색상 선택 도구**: 그래픽 소프트웨어에서는 일반적으로 색상 선택 도구를 제공합니다. 이 도구를 사용하면 직접 색상을 선택할 수 있으며, 선택한 색상에 대한 RGB 값이 표시됩니다. 이를 이용하여 원하는 색상을 선택하고 RGB 값을 확인한 후 사용할 수 있습니다.
3. **색상 이름**: 몇 가지 색상은 이름으로 지정할 수도 있습니다. 예를 들어, "red", "blue", "green" 등이 있습니다. 그러나 이 방법은 제한적이며 RGB 값을 직접 입력하는 것보다는 덜 정확합니다.

그러니까, 원하는 색상을 선택하고 RGB 값을 확인하여 입력하거나, 색상 선택 도구를 사용하여 직접 색상을 선택할 수 있어요.

---

<aside>
💡 18. 면의 색을 바꿔보자 fill();

</aside>

## **그림 그리기와 색상 선택**

### **선 색상 변경하기**

선의 색상을 변경하는 방법은 스트로크 명령어를 사용합니다. 이 명령어는 괄호 안에 색상을 지정하여 선의 색을 변경합니다.

- 단일 색상 지정: 스트로크(색상)
    - 예: 스타로크(255): 검정색에서 흰색 사이의 그레이 스케일로 색상 표시
- RGB 값 지정: 스토로크(R,G,B)
    - 예: 스토로크(49, 120, 250): 파란색 계열로 선의 색상 지정

### **면에 색상 칠하기**

면에 색상을 칠하는 경우, 리 명령어를 사용합니다.
이 명령어는 괄호 안에 매개 변수를 입력하여 색상을 지정합니다.
매개 변수는 하나만 입력하면 그레이 스케일로, 세 개를 입력하면 RGB 값으로 설정됩니다.

- 그레이 스케일: 리(밝기)
    - 예: 리(255): 전체적으로 밝은 핑크색으로 칠해짐
- RGB 값: 리(R,G,B)
    - 예: 리(255, 166, 49): 주황빛 취 색상으로 칠해짐

### **투명도 설정하기**

색상의 투명도를 설정하려면, 알파 값 매개 변수를 사용합니다.
이 값을 0으로 설정하면 완전히 투명하게, 255로 설정하면 완전히 불투명하게 됩니다.

- 알파 값 설정: 리 (R,G,B 알파 값)
- 예: 리(49, 120, 250, 0): 반투명한 파란색으로 칠해짐

### **외곽선 제거하기**

외곽선을 제거하려면 스트로크 명령어에 완전히 투명한 색상을 설정합니다.

- 외곽선 제거: 스트로크(색상, 알파 값)
    - 예: 스트로크(255,0): 외곽선이 완전히 제거됨

---

<aside>
💡 19. 면 혹은 선을 그리지 말아라  noFill(); noStroke();

</aside>

### **그래픽 요소 조작**

### 선 그리기

프로세싱에서 선을 그리는 방법은 스트로크 명령어를 사용합니다. 아래는 선을 그리는 기본적인 예제 코드입니다.

```java
javaCopy code
// 라인 그리기
stroke(255); // 흰색 선
line(30, 20, 85, 75); // (30, 20)에서 (85, 75)까지 선 그리기
```

### 사각형 그리기

프로세싱에서 사각형을 그리는 방법은 렉트 명령어를 사용합니다. 아래는 사각형을 그리는 기본적인 예제 코드입니다.

```java
javaCopy code
// 사각형 그리기
fill(0, 255, 0); // 녹색으로 채우기
rect(50, 50, 100, 75); // (50, 50) 위치에 가로 100, 세로 75 크기의 사각형 그리기
```

### 원 그리기

프로세싱에서 원을 그리는 방법은 엘립스 명령어를 사용합니다. 아래는 원을 그리는 기본적인 예제 코드입니다.

```java
javaCopy code
// 원 그리기
stroke(255, 0, 0); // 빨간색 선
ellipse(100, 100, 50, 50); // (100, 100)을 중심으로 반지름 25의 원 그리기
```

### **투명도 설정**

그래픽 요소의 투명도를 설정하는 방법은 알파 값으로 조절할 수 있습니다. 이 값은 0에서 255 사이의 범위를 가지며, 0일 경우 완전한 투명, 255일 경우 완전한 불투명을 나타냅니다.

```java
javaCopy code
// 투명도 설정 예제
fill(255, 0, 0, 127); // 빨간색, 투명도 50%
```

<aside>
💡 20. 프로세싱 언어의 구조 void setup(){} void draw() {}

</aside>

### **프로세싱 기본 구조 및 프로그래밍 원리**

프로세싱을 사용하여 그림을 그리는 방법은 일종의 프로그래밍 원리를 따르고 있습니다. 컴퓨터에게 명령을 내릴 때에는 사전 준비과정과 반복과정을 고려해야 합니다. 이것은 김밥을 만드는 것에 비유할 수 있습니다.

### 준비과정

프로세싱에서 그림을 그리기 위해서는 먼저 사전에 필요한 재료를 준비해야 합니다. 예를 들어 김밥을 만든다고 생각해보겠습니다. 김밥을 만들 때는 김, 밥, 재료 등을 구매하고 양을 계산하는 등의 사전 준비과정이 필요합니다.

```java
javaCopy code
// 준비과정 예시
int 김의양 = 100;
int 밥의양 = 100;
// 필요한 재료들을 준비하는 코드 작성
```

### 반복과정

그 다음으로는 준비과정이 끝나면 반복해서 일을 수행해야 합니다. 김밥을 만들 때는 김을 깔고, 재료를 넣고, 김으로 감아서 반복해서 김밥을 만듭니다. 이 과정을 프로세싱에서는 draw() 함수 안에 작성합니다.

```java
javaCopy code
// 반복과정 예시
void draw() {
  // 반복해서 수행할 작업을 여기에 작성
}
```

### 기본 구조

프로세싱 프로그램의 기본 구조는 다음과 같습니다.

```java
javaCopy code
void setup() {
  // 초기 설정을 수행하는 코드 작성
}

void draw() {
  // 반복해서 수행할 작업을 여기에 작성
}
```

이렇게 프로세싱은 사전 준비과정과 반복과정을 통해 그림을 그리는데 사용됩니다. 오늘은 이러한 기본 구조를 이해하는 것이 중요합니다. 다음 시간에는 변수나 마우스에 반응하는 등의 내용을 다룰 예정입니다.
