# 2.변수, 조건문, 반복문

<aside>
💡 도형 그리기 명령어 비교

</aside>

- 엘립스와 써클은 각각 타원과 원을 그리는 명령어이다.
- 스퀘어와 써클은 x 좌표, y 좌표, 너비, 높이를 매개변수로 입력하여 도형을 그린다.
- 아크는 각도를 다룰 때 사용되며, 렉트와 쿼드는 사각형을 그리는 명령어로 구성되어 있다.
- 쿼드는 xy xy로 명령을 귀하게 표현하고, 렉트는 x 좌표, y 좌표, 너비, 높이로 구성된다. *abcd* 값은 다른 상황에서 적용될 수 있다.

---

<aside>
💡 렉트 명령어의 종류와 예제 설명

</aside>

- 렉트 명령어 레퍼런스 페이지에서 렉트 명령어와 관련된 명령어들 확인.
- 렉트 보드에는 코너, 코너스, 레이어스, 센터를 매개변수로 받는 명령어 다수 포함.
- 렉트모드에서 코너스로 설정 시, 오른쪽 하단의 코너에 위치 값을 이야기하는 것.
- 레이 디어스 센터 사용 시 중심점으로부터 거리를 설정하여 도형 그림.
- 스트로웨이트 명령어를 통해 선의 두께를 설정할 수 있으며, 숫자에 따라 변화.

---

<aside>
💡 선 그리는 방식 변화 및 도형 실습 지침

</aside>

- 스트로캡 명령어는 끝단을 둥글게 처리, 스퀘어로 끝을 직선으로 자름, 프로젝트로 선의 두께 절반만큼 확장, 스트로크조인으로 꺾이는 부분 처리.
- 세부 옵션인 마이터레블, 라운드, 잡아터로 꺾임 표현, '비긴 쉐이프 엔드 쉘' 명령어로 심볼 그리기, 선 두께와 끝단 처리 설정.
- 도형 그리는 방법 설명과 사이즈 설정 후 선 그리기, 5에이트 응 10팩으로 두께 조절, 선의 끝을 둥글게 처리하는 과정 진행.

---

<aside>
💡 그리기 작업 중 라인 및 모양 완성.

</aside>

- 라운드와 와이터 기본 세팅 확인하여 라인 2번 사용해 부위 그림.
- 전편 10팩셀로 첫 번째 라인, 두번째 50픽셀에서 80픽셀로 그림.
- 비긴 쉐이프 명령어로 그림 시작 및 연결, 볼텍스 명령어로 위치 값 연결하는 선 그림.
- 볼텍스로 10픽셀 40px, 50px 80픽셀, 마지막 90픽셀 40픽셀 입력하여 선 작업.

---

<aside>
💡 도형 및 색상 설정을 설명하는 로고 디자인 과정

</aside>

- 로고 디자인에 다각형과 눈을 그리며, '노우'를 사용해 원하는 색상을 얻었다.
- 이어서 손에 두께를 이용하여 눈을 그리고, 스트로크 에이트를 조절하여 디자인을 완성했다.
- 배경색은 '백그라운드' 명령어를 사용해 깨끗하게 검정색으로 설정하고, 색상 선택은 HSB를 통해 다각도로 조절하였다.
- 이를 통해 다양한 색상 및 디자인 요소를 활용하여 로고를 완성할 수 있다.

---

<aside>
💡 색상 선택과 코딩 프로세싱에 관한 설명

</aside>

- 색상 선택 시 HSB 또는 RGB 중 선택하여 사용하는 방법과 유의사항을 알려줌.
- 프로그램 구조와 코드 입력 방법을 설명하고, 마우스 위치에 따라 원을 그리는 방법을 실습해 움직이는 원을 확인.
- 코딩하여 자신만의 도형이나 그림, 픽토그램을 완성하며, 프로그램 작성이 신기하고 간단하게 느껴짐.
- 프로세싱에서는 '마우스 x' 및 '마우스 y' 입력 시, 원을 마우스 위치에 그리도록 자동으로 조정됨.

---

<aside>
💡 인터랙티브 소프트웨어 개발 과정

</aside>

- 마우스 조작에 반응하는 소프트웨어 개발 과정 설명.
- 원리 : 500px 윈도우 생성 후 초당 움직임반복으로 마우스 위치에 원을 그리고 반투명 설정.
- 코드 수정하여 검정색 배경 위에 투명 흰색 원을 반복하여 남은 잔상 효과 구현.
- 자동 줄 맞춤 및 색상 설정 과정 설명으로 완벽한 흰색 원을 효과적으로 표현.
- 색상과 투명도 조정 후 최종 프로그램 완성.

---

<aside>
💡 그림 그리는 프로그램 개발 과정과 고민

</aside>

- 그림을 지우고 새로 그리며 완성하는 반복적 프로세스에 대한 고민.
- 마우스 속도에 따라 공백이 발생하는 문제를 발견하고 선이 연결되는 파이썬 프로그램을 생각함.
- 각 프레임마다 마우스 위치를 캡처하여 과거 위치와 연결된 선을 그리는 방법을 고민하고 시각화 프로그램 개발.
- 프로그램 개선을 통해 마우스 움직임에 따라 자연스럽게 선이 연결되도록 하는 목표를 설정함.

---

<aside>
💡 마우스 위치에 따른 선 그리기 및 키보드, 마우스 클릭에 반응하는 소프트웨어 개발.

</aside>

- 프로세싱에서는 '이전 마우스 위치를 알려주는' p마우스.x 및 p마우스.y를 활용하여 선 그리기를 조정한다.
- 선을 지우고 흰색 선(픽셀 10)으로 이전 마우스 위치부터 현재 마우스 위치까지 그릴 수 있도록 코드 수정.
- 마우스 클릭 뿐만 아니라 키보드 입력에도 반응하는 함수를 추가하기 위해 'mousePressed' 및 'keyPressed' 함수를 사용한다.

---

<aside>
💡 마우스 및 키보드 함수에 대한 프로그래밍 지식

</aside>

- 500x500 크기의 창 생성 후, 마우스 클릭 시 **원을 그리는 코드** 작성.
- 마우스 함수인 '마우스 프레스드' 및 '키 프레스드'를 사용하여 **마우스 및 키보드 이벤트**에 대한 프로그래밍 방법 설명.
- 마우스 함수들은 마우스 클릭, 드래그, 이동, 누름, 누른 후 떨어짐, 휠 돌림 등을 다루며, 이를 활용하여 **반응하는 코드** 구현.
- 키보드 함수인 키 프레스드, 키 릴리즈드, 취익 타입드를 사용하여 **키보드 이벤트**에 대한 예시 제시하고, 코드 활용법 설명.

---

<aside>
💡 코딩 중 중요한 팁들을 공유

</aside>

- 전체 코드에서 hsb를 연습하면서 라이트 모드만을 사용하고, 백그라운드를 삭제하는 방법을 소개한다.
- 코드에서 초록 색상을 고정하고, 애스트로 웨이트는 뒤에 바뀌어야 하며, 글꼴은 서체에 따라 두께를 조절해야 한다.
- 중요한 명령어는 한 번만 실행하고, 코드 정리와 프로그래밍 습관 중 *커맨드 입력 창에서의 단축키 활용법*을 강조한다.
- 셰프 젝스 영어를 세로로 정렬하고, 특정 명령어는 정리해 딱 한 번만 실행되도록 한다

---

<aside>
💡 드로잉 프로그램에서 사용되는 주석 작성 방법

</aside>

- 드로잉 프로그램에서는 노고를 화면에 그리고 수정하고 설정을 하는 과정을 보여줌.
- 코드에는 마우스 위치와 관련된 기능을 추가하는 방법을 설명함. 주석 작성의 중요성과 주석의 종류를 소개.
- 긴 코드를 이해하기 쉽게하는 주석 작성법과 주석을 통한 프로그램 재사용성 강조.
- 주석 작성 귀찮겠지만 효율성 향상과 코드 이해에 도움을 주기 때문에 많이 활용하는 것이 좋음.

---

<aside>
💡 마우스 위치에 따라 상대적으로 이동하는 프로그램 코드

</aside>

- 여러분에게 필요한 내용 전달 후 마우스 위치에 따라 상대적 이동하는 프로그램 코드 설명.
- 마우스 위치에 따라 40픽셀씩 좌우, 상하로 이동하도록 프로그램 작성.
- 상대적 위치값 계산하여 더하기, 빼기, 곱하기, 나누기 연산을 프로그램 코드에 삽입 가능.
- 예시로 마우스의 위치에서 좌측으로 40픽셀, 상단으로 40픽셀 이동하는 프로그램 실행 후 결과 확인.
- 다음으로 우측으로 40픽셀 이동하도록 코드 수정 후 실행.

---

<aside>
💡 코드 상으로 더하고 빼고 곱하고 나누는 방법 설명.

</aside>

- 코드 상에서 숫자를 활용하여 마우스 이동 로봇 로고를 완성한다.
- 사칙연산 시계가 우선이며, 예시를 통해 +나 -가 계산 순서에 따라 실행된다.
- 사칙연산 코드를 올바르게 작성하여 다른 순서로 실행할 시 오류 발생한다.
- 괄호를 활용할 때는 여는 괄호와 닫는 괄호를 항상 쌍으로 사용해야 하며, 에러 메시지를 확인해야 한다.
- '더하기, 빼기, 곱하기, 나누기'를 코드로 표현하는 방법이 소개된다.

---

<aside>
💡 4층 연산을 이용한 애니메이션 만들기

</aside>

'더하기, 빼기, 곱하기, 나누기' 연산에 대해 이용한 애니메이션 코드 작성 예시

기본 코드 설명을 생략하고, 화면 크기를 502, 505로 설정하고 검정색 배경에 원을 그리는 코드 작성

마우스를 따라가는 대신 각 프레임별로 원이 한 픽셀씩 오른쪽으로 이동하도록 코드를 작성

고정된 값 대신 '변수'를 사용하여 마우스 x의 값을 변동시키는 코드 작성

변수명을 'ing'으로 정하고, 사용자 정의 이름을 지정하여 코드를 완성

---

<aside>
💡 변수와 정수값 컴퓨터 메모리에서 저장하는 방법

</aside>

x포지션은 영자 인트의 약자로 정수를 의미한다.

x포지션 값은 다른 변수로 변경 가능하며, 프로그램 종료 시 컴퓨터는 해당 메모리를 삭제한다.

프로그램 실행 중에 x포지션 값은 계속 변경될 수 있어, 변수에 저장된 값을 화면 픽셀 위치로 표현된다.

변수 선언 시 앞에 무엇을 저장할지 명시하며, 변수의 값은 설정에 따라 화면 위치를 변화시킨다.

컴퓨터에게 해당 변수에 정수값을 저장하도록 지시하는 것은 변수를 선언하는 것이다.

---

<aside>
💡 프로세싱 변수: int부터 플로트까지

</aside>

프로그램 실행과 변수 x포지션의 연산 과정 설명.

프로세싱에 사용되는 변수 종류: int(정수)부터 플로트(소수)까지 다양함.

int는 -21억~21억 사이의 정수 저장, 플로트는 소수 저장 용이.

플로트 변수 넓은 범위 저장 가능하며, 캐스팅 문제 피하기 위한 권장.

플로트 변수 활용으로 코딩이 수월해짐.

---

<aside>
💡 초보 프로그래머를 위한 다양한 변수 설명

</aside>

- 프로그래밍 초반에 *슬로트* 사용으로 *불리언* 변수가 주로 사용된다.
- 이어서 자바는 8개 비트로 -128부터 127까지 저장할 수 있는 변수이다. 자바 언어 변수는 1개 문자 저장하는데 활용되며, 데이터 통신이나 문자열 처리에 사용된다.
- 그뿐만 아니라 자바 변수와 자바 변수(롱)도 다루지만 자세한 내용은 나중에 다룬다. 대부분 *플로트* 변수로 코딩을 시작한다.

---

<aside>
💡 프로그래밍 변수 이름 설정 규칙과 시스템 변수 활용

</aside>

- 프로그램에서 변수 이름 설정 시, 영문 소문자 사용하고 두 개의 단어가 연결될 때 두 번째 단어의 첫 글자는 대문자로 작성하는 것이 좋다.
- 이름은 코드를 읽을 때 쉽게 이해할 수 있도록 지어주어야 하며, 특히 시스템 변수와 중복되지 않도록 주의해야 한다.
- 프로세싱에서는 이미 사용 중인 시스템 변수들이 있으므로 그것들을 피하고, 변수명을 명확하고 추상적이지 않은 이름으로 설정하는 것이 바람직하다.
- 시스템 변수인 리스해이츠를 활용해 윈도우의 너비와 높이를 설정할 수 있으며, 이러한 시스템 변수를 적절히 활용하여 프로그래밍을 진행하는 것이 중요하다.

---

<aside>
💡 마우스를 따라 색상 변화 만들기

</aside>

- 프레임 카운트 시스템 변수를 활용해 초당 60회 씩 변하는 색상 구현.
- RGB 색상값이 0-255로 설정되어 있으며, 숫자 계산을 통해 색상과 밝기를 순환하도록 프로그래밍.
- 색상 변화는 빨, 주, 노, 초, 파, 남, 보 순으로 반복되며, 밝기가 깜빡거리는 효과 구현.
- 프레임 카운트 숫자를 256으로 나눈 나머지를 활용하여 색상 변환과 밝기 조절을 반복하고 있음.

---

<aside>
💡 코딩 팁: 화면 중간 이동 후, 랜덤 밝기 색 지정하기

</aside>

- 화면 중간 이동을 위해 'screenX = 250'보다 'centerX' 사용하는 것이 좋다고 설명.
- 랜덤으로 명도 지정하는 방법 소개. 랜덤 활용은 코딩에서 중요한 요소이며, '0에서 255'까지의 값 사용.
- 함수 '랜덤'을 이용하여 0~255 범위의 밝기 값 설정, 다양한 적용 가능.
- 매개변수를 이용하여 랜덤 값 출력. 랜덤 기능은 다양한 응용 가능성 존재.

---

<aside>
💡 프로세싱: 조건문과 마우스 위치 부여

</aside>

조건문이 특수 상황에서 코드를 실행하는 것을 설명하며, 'if(조건식)'으로 작성한다.

'if'괄호에서 데드 코드(실행되지 않는 코드)가 나올 시 '소스'라고 바꿔야 한다.

마우스 x 위치에 따라 백그라운드 색상을 변경하는 프로세싱 예시를 제시하고 해석한다.

마우스 위치를 나눠 색상을 부여하는 복잡한 조건문 작성법을 설명한다.

---

<aside>
💡 코드 정열 시 꿀팁 + 컬러 확인 방법

</aside>

코드 정열을 위해 커맨드 t, 컨트롤 케이를 사용하여 한 줄 정열이 필요하며, l스 중가루를 활용해 중바롱을 나타낼 수 있습니다.

코드를 잘 보기 위해 2줄 맞춤이 필요하며, 코드 실행 시 검정색, 회색, 흰색이 번갈아가며 나타납니다.

이프 구문을 활용하면 간단한 코드 변환 가능하며, 5분의 1, 5분의 4 등의 조건문을 이용하여 다양한 색상 구분이 가능합니다.

다양한 숫자 스케일에 따라 코드를 다섯 단계로 분할하여 실행함으로써 다양한 색상을 확인할 수 있습니다.

---

<aside>
💡 코드에서 비교 연산자와 마우스 위치에 따른 색 변화.

</aside>

'if', 'else' 구문을 설명하고, 프로세싱 레퍼런스 페이지의 비교 연산자와 사용법에 대해 소개함.

마우스 위치에 따라 색이 변하는 코드 작성하는 방법과 '!', '||' 등의 논리 연산자 활용법을 설명함.

예시로 마우스 위치에 따라 배경색이 변하도록 하는 코드 작성 및 실행 예시를 제시함.

사용하지 않을 연산자에 대한 설명 및 나중에 활용 가능하다고 언급함. 마지막 강의 내용을 다음 강의로 이어감.

---

<aside>
💡 화면 이동 및 반사 게임 로직 코딩 설명

</aside>

- 화면 경계에서 왕딛쳐 원이 반대편으로 돌아오는 로직을 코딩하는 설명이다.
- x 포지션이 화면을 벗어나면 -로 바뀌어 돌아오고, 왼쪽 끝에 도달하면 다시 오른쪽으로 이동한다.
- x포지션 값이 0미만이 되면 다시 우측으로 이동하는 반사 효과가 있다.

---

<aside>
💡 프로그래밍에서 반복문 활용의 중요성

</aside>

- 프로그래밍에서 *반복문*은 매우 중요하며, 컴퓨터 사용의 근간이다.
- 반복문은 컴퓨터가 계산하고 반복 작업을 가능케 해주는데, *효율적*이고 *빠른* 작업을 가능하게 한다.
- 프로그래밍으로 *파티클 작업*이나 *패턴 생성* 등의 반복적인 작업을 빠르게 할 수 있다.
- 반복문의 *복잡성*은 이해하기 어려울 수 있지만, 꾸준한 학습으로 *프로세싱 스킬 향상*에 도움이 된다.

---

<aside>
💡 수작업 점 찍기와 코드 간략화

</aside>

- 점을 수작업으로 반복 찍어 그려보고, p로 선의 굵기와 위치 설정하여 코드를 작성했다.
- 프로그래머는 일반적으로 이런 방식으로 수작업하지 않으며, 이를 일러스트레이터나 프로세싱 소프트웨어로 대체한다.
- 점 찍는 코드를 간략화하기 위해 와이라는 구문을 사용하여 반복 내용을 축약하고 물음표에 참거짓을 판단할 수 있는 코드를 넣어 노란색 부분을 반복 실행한다.

---

<aside>
💡 반복문과 변수 활용 설명

</aside>

반복문에서 숫자를 20씩 증가시키며 변수를 활용하여 처리함.

변수로 x를 선언하고 처음에는 20으로 시작하며, 각 반복에서 x에 20을 더해가며 증가시킴.

실행 전 불필요한 구문을 지우고, 간격을 조절할 때 타이핑을 다시 하지 않고도 반복문을 통해 빠르게 변경 가능.

프로그래밍1 강점은 변수와 반복문을 활용해 화면 확인을 용이하게 함.

---

<aside>
💡 반복문 활용 및 차이점 이해하기

</aside>

와일의 구문은 괄호로 묶인 구조를 갖추고 코드를 반복 실행한다.

반면, 후문을 활용하여 이중 중괄호 안에 반복 코드를 쉽게 작성 가능하며, 변수 생성과 조건, 증가 감소 부분이 한 줄에 모두 포함된다.

반복하는 내용만 중괄호 안에 들어가는 '후문'을 이용하면, 프로그램 결과를 확인하며 반복 작업을 수행할 수 있다.

로우 함수를 이용한 반복과 후문을 이용한 반복의 차이는 결과를 시각적으로 확인할 수 있는지의 여부에 있다. 로우 함수를 사용하면 화면에 직접적인 과정을 볼 수 없다.

---

<aside>
💡 반복문을 이용하여 애니메이션 효과 추가

</aside>

화면에 애니메이션 효과를 주려면 '으로'로 반복을, 여러 개를 동시에 그리고 싶다면 반복문을 사용한다.

이때 '플러스 2 꼴' 연산자를 사용하여 숫자를 더해 값 수정하며 코드를 줄일 수 있다.

여러 개의 요소를 한꺼번에 그리고자 할 때, '플러스 2 꼴 ' 연산자를 활용해야 한다.

학습 후 실습이 필수이며, **영상 강의**로 진행되어 중요 내용을 이해하는데 시간이 필요하다.
